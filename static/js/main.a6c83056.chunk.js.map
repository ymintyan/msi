{"version":3,"sources":["api.js","Joke.js","date.js","JokesList.js","SearchInput.js","BtnWrapper.js","SingleCategory.js","JokeCategoriesContainer.js","JokeSelect.js","Favourites.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","getFavouriteJokesFromLS","jokes","localStorage","getItem","JSON","parse","setFavouriteJokesToLS","length","jokesUpdated","setItem","stringify","Joke","data","setFavJokes","isCustomStyle","isSearchedJokeInFav","updated_at","value","url","id","categories","updatedHrsAgo","str","datePast","Date","datepastInMs","diffInMs","now","Math","round","date","className","href","target","onClick","e","jokesFromLS","isRepeated","forEach","joke","indexToDelete","i","splice","push","map","cat","key","JokesList","props","errorMsg","favJokes","result","total","withStyles","theme","textField","border","padding","borderRadius","marginTop","isVisible","handleInput","classes","text","TextField","size","fullWidth","placeholder","onChange","InputProps","disableUnderline","useStyles","makeStyles","root","fontSize","fontWeight","color","background","textTransform","BtnWrapper","handleClick","Button","SingleCategory","selectHandler","selected","useState","isSelected","toggleState","styles","classNames","stopPropagation","JokeCategoriesContainer","selectedCategories","handleCategorySelecting","item","Object","keys","includes","JokeSelect","setApiJokes","jokeCategories","setErrorMsg","jokeType","setJokeType","setCategories","searchText","setSearchText","category","search","controlsVisibility","setControlsVisibility","FormControl","component","RadioGroup","name","FormControlLabel","control","Radio","label","hasOwnProperty","type","path","join","fetch","getJoke","then","response","json","error","message","Favourites","document","getElementById","classList","toggle","App","apiJokes","apiCategories","setApiCategories","reqErrorMsg","favouriteJokesFromLS","favouriteJokes","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.a6c83056.chunk.js","sourcesContent":["const apiUrl = 'https://api.chucknorris.io/jokes';\r\n\r\nexport function getJoke(type, data) {\r\n    const {searchText, selectedCategories} = data;\r\n\r\n    let path = '';\r\n    switch(type) {\r\n        case 'random':\r\n            path = '/random';\r\n            break;\r\n        case 'category':\r\n            const category = Object.keys(selectedCategories).join(','); \r\n            path = `/random?category=${category}`;\r\n            break;\r\n        case 'search':\r\n            path = `/search?query=${searchText}`;\r\n            break;\r\n    }\r\n    return fetch(`${apiUrl}${path}`);\r\n}\r\n\r\nexport function getJokeCategories() {\r\n    return fetch(`${apiUrl}/categories`);\r\n}\r\n\r\nexport function getFavouriteJokesFromLS(){\r\n    const jokes = localStorage.getItem('favourite_jokes');\r\n    \r\n    if(!jokes) {\r\n        return [];\r\n    }\r\n\r\n    return JSON.parse(jokes);\r\n}\r\n\r\nexport function setFavouriteJokesToLS(jokes){\r\n    const jokesFromLS = getFavouriteJokesFromLS();\r\n    \r\n    if(!jokesFromLS.length) {\r\n        localStorage.setItem('favourite_jokes', JSON.stringify(jokes))\r\n    } else {\r\n        const jokesUpdated = [...jokes];\r\n        localStorage.setItem('favourite_jokes', JSON.stringify(jokesUpdated));\r\n    }\r\n}","import React from 'react';\r\nimport date from './date';\r\n\r\nimport {setFavouriteJokesToLS,getFavouriteJokesFromLS} from './api';\r\nimport './Joke.css';\r\n\r\nfunction Joke({data, setFavJokes, isCustomStyle, isSearchedJokeInFav}) {\r\n    const {\r\n        updated_at,\r\n        value,\r\n        url,\r\n        id,\r\n        categories\r\n    } = data;\r\n\r\n    const handleClick = e => {\r\n        const jokesFromLS = getFavouriteJokesFromLS();\r\n        let isRepeated = false;\r\n        jokesFromLS.forEach(joke => {\r\n            if(joke.id === id) isRepeated = true;\r\n        })\r\n        \r\n        if(isRepeated){\r\n            const jokes = getFavouriteJokesFromLS();\r\n            let indexToDelete;\r\n            jokes.forEach((joke,i) => {\r\n               if(joke.id === id) {\r\n                   indexToDelete = i;\r\n               }\r\n            })\r\n\r\n            jokes.splice(indexToDelete,1);\r\n        \r\n            setFavouriteJokesToLS(jokes);\r\n            setFavJokes(jokes);\r\n        } else {\r\n            const jokesFromLS = getFavouriteJokesFromLS();\r\n            jokesFromLS.push(data);\r\n            setFavouriteJokesToLS(jokesFromLS);\r\n            const jokes = getFavouriteJokesFromLS();\r\n            setFavJokes(jokes);\r\n        }\r\n        \r\n    };\r\n    \r\n    if(data.length === 0) return null;\r\n    \r\n    const updatedHrsAgo = date(updated_at);\r\n    \r\n    return (\r\n        <div className={isCustomStyle ? \"joke-wrapper-fav\" : \"joke-wrapper\"}>\r\n           <div className=\"joke-link\">\r\n                ID: <a href={`${url}`} target=\"_blank\">{id}</a>\r\n           </div>\r\n           <div className={ isCustomStyle || isSearchedJokeInFav ? \"joke-favourite-selected\" : \"joke-favourite\"} onClick={handleClick}></div>\r\n           <div className=\"joke-value\">\r\n                {value}\r\n           </div>\r\n           <div className=\"joke-footer\">\r\n               <div className=\"joke-updatedAt\">\r\n                {`Last update: ${updatedHrsAgo} hours ago`}\r\n                </div>\r\n                <div className=\"joke-categories\">\r\n                    {\r\n                        categories.length ? \r\n                        categories.map(cat => {\r\n                            return <div className=\"category-item\" key={cat}>{cat}</div>\r\n                        }) : null\r\n                    }\r\n                </div>\r\n           </div>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Joke;","export default function convertDate(str){\r\n    \r\n    const datePast = new Date(str);\r\n    const datepastInMs = Date.parse(datePast);\r\n    const dateNowInMs = Date.now();\r\n    \r\n    const msInHour = 3600000;\r\n    const diffInMs = dateNowInMs - datepastInMs;\r\n   \r\n    const hoursAgo = Math.round(diffInMs/msInHour);\r\n\r\n    return hoursAgo;\r\n}","import React from 'react';\r\nimport Joke from './Joke';\r\nimport './JokesList.css';\r\n\r\nfunction JokesList(props) {\r\n    const {jokes, errorMsg, setFavJokes, favJokes} = props;\r\n    \r\n    const isSearchedJokeInFav = joke => {\r\n        \r\n        for (let i = 0; i < favJokes.length; i++) {\r\n            if(joke.id === favJokes[i].id) {\r\n                return true;\r\n            } \r\n        }\r\n        return false;\r\n    };\r\n\r\n    if (errorMsg) return <div className=\"error-message\">{errorMsg}</div>\r\n    \r\n    return jokes.result ? ( jokes.total ? (\r\n        <div className=\"jokes-list\">\r\n            {jokes.result.map((joke)=>{\r\n                return <Joke data={joke} key={joke.id} isSearchedJokeInFav={isSearchedJokeInFav(joke)} setFavJokes={setFavJokes} />\r\n            })}\r\n        </div>\r\n    ) : <div className=\"error-message\">No results</div>)\r\n    : <div className=\"jokes-list\">\r\n        <Joke data={jokes} isSearchedJokeInFav={isSearchedJokeInFav(jokes)} setFavJokes={setFavJokes} />    \r\n    </div>;\r\n}\r\n\r\nexport default JokesList;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst styles = theme => ({\r\n    textField: {\r\n        border: '2px solid #333333',\r\n        padding: '10px 15px',\r\n        borderRadius: 10,\r\n        marginTop: 20\r\n    }\r\n});\r\n\r\nfunction SearchInput(props) {\r\n    const {isVisible, handleInput, classes, text} = props;\r\n    \r\n    return isVisible ? (\r\n        <div className=\"search-wrapper\">\r\n            <TextField id='search-input' size=\"small\"  fullWidth={true} \r\n            placeholder=\"Free text search...\" \r\n            onChange={handleInput}\r\n            value={text} \r\n            className={classes.textField}\r\n            InputProps={{\r\n                disableUnderline: true\r\n            }}\r\n            />\r\n        </div>\r\n    ) : null;\r\n}\r\n\r\nexport default withStyles(styles)(SearchInput);","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    padding: '10px 40px',\r\n    fontSize: '16px',\r\n    fontWeight: 'bold',\r\n    color: '#fff',\r\n    background: 'linear-gradient(92.01deg, #8EA7FF 0%, #7291FF 100%)',\r\n    borderRadius: 10,\r\n    textTransform: 'none',\r\n    \"&:hover\": {\r\n        background: 'linear-gradient(92.01deg, #8EA7ff 0%, #496ff3 100%)'\r\n    }\r\n  }\r\n});\r\n\r\n\r\nfunction BtnWrapper(props) {\r\n    const {handleClick} = props;\r\n    const classes = useStyles();\r\n    return (\r\n        <div className=\"btn-wrapper\">\r\n            <Button onClick={handleClick} \r\n            classes={{\r\n                root: classes.root\r\n            }}>\r\n                Get a joke\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BtnWrapper;","import React, {useState} from 'react';\r\nimport classNames from 'classnames';\r\n\r\nfunction SingleCategory(props) {\r\n    const {data, selectHandler, selected} = props;\r\n    const [isSelected, toggleState] = useState({selected})\r\n    const styles = classNames('single-category', { selected: isSelected.selected});\r\n    \r\n    const handleClick = (e) => {\r\n        e.stopPropagation();\r\n        toggleState({selected: !isSelected.selected});\r\n        selectHandler(data);\r\n    };\r\n    return (\r\n        <div className={styles} onClick={handleClick}>\r\n            {data}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SingleCategory;","import React from 'react';\r\nimport SingleCategory from './SingleCategory';\r\n\r\nimport './JokeCategoriesContainer.css';\r\n\r\nfunction JokeCategoriesContainer(props) {\r\n    const {categories, selectedCategories, isVisible, handleCategorySelecting} = props;\r\n    return isVisible ? (\r\n        <div className='categories-list show'>\r\n            {\r\n            categories.map((item)=>{\r\n                const categoriesKeys = Object.keys(selectedCategories);\r\n                const selected = categoriesKeys.includes(item);\r\n                return <SingleCategory selected={selected} selectHandler={handleCategorySelecting} data={item} key={item} />;\r\n            })\r\n            }\r\n        </div>\r\n    ) \r\n    : null;\r\n}\r\n\r\nexport default JokeCategoriesContainer;","import React, { useState } from 'react';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport SearchInput from './SearchInput';\r\nimport BtnWrapper from './BtnWrapper';\r\nimport JokeCategoriesContainer from './JokeCategoriesContainer';\r\nimport {getJoke} from './api';\r\n\r\nimport './JokeSelect.css';\r\n\r\nfunction JokeSelect(props) {\r\n    const {setApiJokes, jokeCategories, setErrorMsg} = props;\r\n    const [jokeType, setJokeType] = useState('random');\r\n    \r\n    const [categories, setCategories] = useState({});\r\n\r\n    const [searchText, setSearchText] = useState('');\r\n\r\n    const [controlsVisibility, setControlsVisibility] = useState({\r\n        category: false,\r\n        search: false\r\n    })\r\n    \r\n    const handleCategorySelecting = (category) => {\r\n        const selectedCategories = {...categories};\r\n                \r\n        if(categories.hasOwnProperty(category)) {\r\n            delete selectedCategories[category];\r\n            setCategories({...selectedCategories});\r\n            return;\r\n        }\r\n        selectedCategories[category] = true;\r\n        setCategories({...selectedCategories});\r\n    };\r\n\r\n    const handleInput = (e) => {\r\n        setSearchText(e.target.value);\r\n    };\r\n      \r\n    const handleChange = (e) => {\r\n\r\n        setJokeType(e.target.value);\r\n\r\n        if(e.target.value === 'random') setControlsVisibility({\r\n            category: false,\r\n            search: false\r\n        });\r\n        \r\n        if(e.target.value === 'category') setControlsVisibility({\r\n            search: false, \r\n            category: true\r\n        })\r\n\r\n        if(e.target.value === 'search') setControlsVisibility({\r\n            category: false, \r\n            search: true\r\n        })\r\n    };\r\n\r\n    const handleClick = (e) => {\r\n        \r\n        const jokes = getJoke(jokeType, { searchText,selectedCategories:categories }).then(\r\n            response => response.json())\r\n        .then(\r\n            response => {\r\n                if(!response.error) {\r\n                    setApiJokes(response);\r\n                    setErrorMsg('');\r\n                } else {\r\n                    setErrorMsg(response.message);\r\n                }\r\n                return response;\r\n            }\r\n        );\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <FormControl component=\"fieldset\" fullWidth={true}>\r\n                <RadioGroup name=\"jokeType\" value={jokeType} onChange={handleChange}>\r\n                    <FormControlLabel value=\"random\" control={<Radio className='custom-color' />} label=\"Random\" />\r\n                    <FormControlLabel value=\"category\" control={<Radio className='custom-color' />} label=\"From categories\" />\r\n                    <JokeCategoriesContainer handleCategorySelecting={handleCategorySelecting} isVisible={controlsVisibility.category} selectedCategories={categories} categories={jokeCategories} />\r\n                    <FormControlLabel value=\"search\" control={<Radio className='custom-color' />} label=\"Search\" />\r\n                    <SearchInput handleInput={handleInput} text={searchText} isVisible={controlsVisibility.search} />\r\n                </RadioGroup>\r\n            </FormControl>\r\n            <BtnWrapper handleClick={handleClick} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JokeSelect;","import React from 'react';\r\nimport Joke from './Joke';\r\n\r\nfunction Favourites(props) {\r\n    const {jokes,setFavJokes} = props;\r\n\r\n    const handleClick = e => {\r\n        document.getElementById('favourite-inner').classList.toggle('show');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"favourite-secondary-title\">Favourite</div>\r\n            <div className=\"favourite-menu-btn\" onClick={handleClick}></div>\r\n            <div id=\"favourite-inner\" className=\"favourite-inner\">\r\n                <div className=\"favourite-inner-wrapper\">\r\n                <div className=\"favourite-menu-btn\" onClick={handleClick}></div>\r\n                <div className=\"favourite-secondary-title\">Favourite</div>\r\n                    <h3 className=\"favourite-title\">\r\n                        Favourite\r\n                    </h3>\r\n                    {\r\n                        jokes.length ? \r\n                        <div>\r\n                            {jokes.map(joke => {\r\n                                return <Joke data={joke} setFavJokes={setFavJokes} isCustomStyle={true} key={joke.id} />\r\n                            })\r\n                            }\r\n                        </div> :\r\n                        null\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default Favourites;","import React, {useState,useEffect} from 'react';\nimport './App.css';\nimport JokesList from './JokesList';\nimport JokeSelect from './JokeSelect';\nimport Favourites from './Favourites';\nimport {getJokeCategories, getFavouriteJokesFromLS} from './api';\n\nfunction App() {\n  const [apiJokes, setApiJokes] = useState([]);\n  const [apiCategories, setApiCategories] =  useState([]);\n  const [reqErrorMsg, setErrorMsg] = useState('');\n  const favouriteJokesFromLS = getFavouriteJokesFromLS();\n  const [favouriteJokes, setFavJokes] = useState(favouriteJokesFromLS);\n  \n\n  useEffect(function(){\n    getJokeCategories()\n    .then(\n      (response) => response.json()\n    )\n    .then(\n      (response) => {\n        if(!apiCategories.length) setApiCategories(response);\n      }\n    )}, [])\n\n  return (\n    <div className=\"container\">\n      <div className=\"main-wrapper\">\n        <h2 className=\"main-title\">MSI 2020</h2>\n        <p className=\"greeting-title\">Hey!</p>\n        <p className=\"greeting-text\">Let’s try to find a joke for you:</p>\n        <JokeSelect setApiJokes={setApiJokes} setErrorMsg={setErrorMsg} jokeCategories={apiCategories} />\n        <JokesList jokes={apiJokes} favJokes={favouriteJokes} setFavJokes={setFavJokes} errorMsg={reqErrorMsg}/>\n      </div>\n      <div className=\"favourites-wrapper\">\n        <Favourites jokes={favouriteJokes} setFavJokes={setFavJokes}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}